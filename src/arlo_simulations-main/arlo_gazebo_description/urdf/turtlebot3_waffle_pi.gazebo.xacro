<?xml version="1.0"?>
<robot name="turtlebot3_waffle_pi_sim" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:arg name="robot_name" default = "wx250s"/>
  <xacro:arg name="laser_visual"  default="true"/>
  <xacro:arg name="camera_visual" default="true"/>
  <xacro:arg name="imu_visual"    default="false"/>


  <gazebo reference="$(arg robot_name)/base_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>

  <gazebo reference="$(arg robot_name)/wheel_left_link">
    <mu1>0.99</mu1>
    <mu2>0.99</mu2>
    <kp>1e6</kp>
    <kd>1e13</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.01</maxVel>
    <!-- <fdir1>0 1 0</fdir1> -->
    <material>Gazebo/RedGlow</material>
  </gazebo>

  <gazebo reference="$(arg robot_name)/wheel_right_link">
    <mu1>0.99</mu1>
    <mu2>0.99</mu2>
    <kp>1e6</kp>
    <kd>1e13</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.01</maxVel>
    <!-- <fdir1>0 1 0</fdir1> -->
    <material>Gazebo/GreenGlow</material> 
  </gazebo>

  <gazebo reference="$(arg robot_name)/caster_front_link">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1e6</kp>
    <kd>1e3</kd>
    <minDepth>0.005</minDepth>
    <maxVel>0.01</maxVel>
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <gazebo reference="$(arg robot_name)/caster_back_link">
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1e6</kp>
    <kd>1e3</kd>
    <minDepth>0.005</minDepth>
    <maxVel>0.01</maxVel>
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <!-- <gazebo reference="$(arg robot_name)/camera_tower_link">
    <material>Gazebo/FlatBlack</material>
  </gazebo> -->
  <!-- <gazebo reference="caster_back_right_link">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <gazebo reference="caster_back_left_link">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
    <material>Gazebo/FlatBlack</material>
  </gazebo> -->

  <!-- <gazebo reference="$(arg robot_name)/wheel_left_joint">
    <implicitSpringDamper>true</implicitSpringDamper>
    <springStiffness>1000000</springStiffness>
    <springReference>0.9</springReference>
  </gazebo>

  <gazebo reference="$(arg robot_name)/wheel_right_joint">
    <implicitSpringDamper>true</implicitSpringDamper>
    <springStiffness>1000000</springStiffness>
    <springReference>0.9</springReference>
  </gazebo>

  <gazebo reference="$(arg robot_name)/caster_front_joint">
    <implicitSpringDamper>true</implicitSpringDamper>
    <springStiffness>1000000</springStiffness>
    <springReference>0.9</springReference>
  </gazebo>

  <gazebo reference="$(arg robot_name)/caster_back_joint">
    <implicitSpringDamper>true</implicitSpringDamper>
    <springStiffness>1000000</springStiffness>
    <springReference>0.9</springReference>
  </gazebo> -->


  <gazebo>
    <plugin name="turtlebot3_waffle_pi_controller" filename="libgazebo_ros_diff_drive.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometrySource>world</odometrySource>
      <publishOdomTF>true</publishOdomTF>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>true</publishTf>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <!-- <legacyModeNS>true</legacyModeNS> -->

      <updateRate>30</updateRate>
      <leftJoint>wheel_left_joint</leftJoint>
      <rightJoint>wheel_right_joint</rightJoint>
      <!-- <wheelSeparation>0.386628</wheelSeparation>
      <wheelDiameter>0.1524</wheelDiameter> -->
      <!-- THESE COULD BE BETTER -->
      <!-- <wheelAcceleration>1.5</wheelAcceleration> -->
      <wheelTorque>5</wheelTorque>
      <!-- figure out why the wheels slip at teleop > .5 -->
      <rosDebugLevel>na</rosDebugLevel>
      <allow_multiple_cmd_vel_publishers>true</allow_multiple_cmd_vel_publishers>
    </plugin>
    <plugin filename="libgazebo_ros_p3d.so" name="p3d_base_controller">
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
      <bodyName>wx250s/base_link</bodyName>
      <topicName>wx250s/odom</topicName>
      <gaussianNoise>0</gaussianNoise>
      <frameName>wx250s/map</frameName>
      <xyzOffsets>0 0 0</xyzOffsets>
      <rpyOffsets>0 0 0</rpyOffsets>
      <!-- <interface:position name="p3d_base_position"/> -->
    </plugin>
  </gazebo>

  <gazebo reference="$(arg robot_name)/base_scan">
    <material>Gazebo/FlatBlack</material>
    <sensor type="ray" name="rplidar">
      <pose>0 0 0 0 0 0</pose>
      <visualize>$(arg laser_visual)</visualize>
      <update_rate>10</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>400</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.2</min>
          <max>10</max>
          <resolution>0.02</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_rplidar_controller" filename="libgazebo_ros_laser.so">
        <topicName>scan</topicName>
        <frameName>base_scan</frameName>
      </plugin>
    </sensor>
  </gazebo>

<!-- link : https://www.raspberrypi.org/documentation/hardware/camera/-->
  <!-- <gazebo reference="camera_rgb_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
      <camera>
          <horizontal_fov>1.085595</horizontal_fov>
          <image>
              <width>640</width>
              <height>480</height>
              <format>R8G8B8</format>
          </image>
          <clip>
              <near>0.03</near>
              <far>100</far>
          </clip>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <cameraName>camera</cameraName>
        <frameName>camera_rgb_optical_frame</frameName>
        <imageTopicName>rgb/image_raw</imageTopicName>
        <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo> -->

  <!-- <joint name="camera_depth_joint" type="fixed">
    <origin rpy="${-pi/2} 0 ${-pi/2}" xyz="0 0 0"/>
    <parent link="$(arg robot_name)/camera_link"/>
    <child link="(arg robot_name)/camera_depth_link"/>
  </joint>
  <link name="(arg robot_name)/camera_depth_link">
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </link> -->

    <!-- 
    ****************************************************************************
    ****************************** TESTING BELOW *******************************
    ****************************************************************************
    ******************************** RE-ENABLE *********************************
    ********************************** LATER ***********************************
    -->
  
  <!-- <gazebo reference="$(arg robot_name)/camera_depth_frame">
    <sensor name="camera_frame_sensor" type="depth">
      <alwaysOn>true</alwaysOn>
      <visualize>$(arg camera_visual)</visualize>
      <update_rate>15.0</update_rate>
      <camera>
        <horizontal_fov>0.994837</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.03</near>
          <far>10.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_frame_controller">
        <updateRate>0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>color/image_raw</imageTopicName>
        <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>aligned_depth_to_color/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>aligned_depth_to_color/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>depth_registered/points</pointCloudTopicName>
        

        <frameName>/$(arg robot_name)/camera_depth_optical_frame</frameName>

        <pointCloudCutoff>0.03</pointCloudCutoff>
        <pointCloudCutoffMax>10</pointCloudCutoffMax>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo> -->

</robot>
